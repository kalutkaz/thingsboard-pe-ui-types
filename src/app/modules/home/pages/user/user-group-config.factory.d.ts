import { Observable } from 'rxjs';
import { TranslateService } from '@ngx-translate/core';
import { UtilsService } from '@core/services/utils.service';
import { EntityGroupStateConfigFactory, EntityGroupStateInfo, GroupEntityTableConfig } from '@home/models/group/group-entities-table-config.models';
import { EntityAction } from '@home/models/entity/entity-component.models';
import { MatDialog } from '@angular/material/dialog';
import { UserPermissionsService } from '@core/http/user-permissions.service';
import { EntityGroupParams, ShortEntityView } from '@shared/models/entity-group.models';
import { HomeDialogsService } from '@home/dialogs/home-dialogs.service';
import { GroupConfigTableConfigService } from '@home/components/group/group-config-table-config.service';
import { UserInfo } from '@shared/models/user.model';
import { UserService } from '@core/http/user.service';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import { AuthService } from '@core/auth/auth.service';
import { Router } from '@angular/router';
import * as i0 from "@angular/core";
export declare class UserGroupConfigFactory implements EntityGroupStateConfigFactory<UserInfo> {
    private groupConfigTableConfigService;
    private userPermissionsService;
    private translate;
    private utils;
    private dialog;
    private homeDialogs;
    private userService;
    private authService;
    private router;
    private store;
    private window;
    constructor(groupConfigTableConfigService: GroupConfigTableConfigService<UserInfo>, userPermissionsService: UserPermissionsService, translate: TranslateService, utils: UtilsService, dialog: MatDialog, homeDialogs: HomeDialogsService, userService: UserService, authService: AuthService, router: Router, store: Store<AppState>, window: Window);
    createConfig(params: EntityGroupParams, entityGroup: EntityGroupStateInfo<UserInfo>): Observable<GroupEntityTableConfig<UserInfo>>;
    addUser(config: GroupEntityTableConfig<UserInfo>): Observable<UserInfo>;
    private openUser;
    loginAsUser($event: Event, user: UserInfo | ShortEntityView): void;
    displayActivationLink($event: Event, user: UserInfo): void;
    resendActivation($event: Event, user: UserInfo): void;
    setUserCredentialsEnabled($event: Event, user: UserInfo, userCredentialsEnabled: boolean): void;
    manageOwnerAndGroups($event: Event, user: UserInfo, config: GroupEntityTableConfig<UserInfo>): void;
    onUserAction(action: EntityAction<UserInfo>, config: GroupEntityTableConfig<UserInfo>, params: EntityGroupParams): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<UserGroupConfigFactory, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<UserGroupConfigFactory>;
}
