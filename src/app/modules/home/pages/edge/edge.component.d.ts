import { ChangeDetectorRef } from '@angular/core';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import { UntypedFormBuilder, UntypedFormGroup } from '@angular/forms';
import { EntityType } from '@shared/models/entity-type.models';
import { TranslateService } from '@ngx-translate/core';
import { GroupEntityComponent } from '@home/components/group/group-entity.component';
import { Edge } from '@shared/models/edge.models';
import { GroupEntityTableConfig } from '@home/models/group/group-entities-table-config.models';
import { UserPermissionsService } from '@core/http/user-permissions.service';
import * as i0 from "@angular/core";
export declare class EdgeComponent extends GroupEntityComponent<Edge> {
    protected store: Store<AppState>;
    protected translate: TranslateService;
    private userPermissionsService;
    protected entityValue: Edge;
    protected entitiesTableConfigValue: GroupEntityTableConfig<Edge>;
    fb: UntypedFormBuilder;
    protected cd: ChangeDetectorRef;
    entityType: typeof EntityType;
    constructor(store: Store<AppState>, translate: TranslateService, userPermissionsService: UserPermissionsService, entityValue: Edge, entitiesTableConfigValue: GroupEntityTableConfig<Edge>, fb: UntypedFormBuilder, cd: ChangeDetectorRef);
    ngOnInit(): void;
    hideDelete(): boolean;
    hideManageUsers(): boolean;
    hideManageAssets(): boolean;
    hideManageDevices(): boolean;
    hideManageEntityViews(): boolean;
    hideManageDashboards(): boolean;
    hideManageSchedulerEvents(): boolean;
    buildForm(entity: Edge): UntypedFormGroup;
    updateForm(entity: Edge): void;
    updateFormState(): void;
    onEdgeIdCopied($event: any): void;
    onEdgeInfoCopied(type: string): void;
    isTenantAdmin(): boolean;
    private generateRoutingKeyAndSecret;
    static ɵfac: i0.ɵɵFactoryDeclaration<EdgeComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<EdgeComponent, "tb-edge", never, {}, {}, never, never, false, never>;
}
