import { Observable } from 'rxjs';
import { TranslateService } from '@ngx-translate/core';
import { UtilsService } from '@core/services/utils.service';
import { EntityGroupStateConfigFactory, EntityGroupStateInfo, GroupEntityTableConfig } from '@home/models/group/group-entities-table-config.models';
import { EntityAction } from '@home/models/entity/entity-component.models';
import { MatDialog } from '@angular/material/dialog';
import { UserPermissionsService } from '@core/http/user-permissions.service';
import { EntityGroupParams, ShortEntityView } from '@shared/models/entity-group.models';
import { HomeDialogsService } from '@home/dialogs/home-dialogs.service';
import { GroupConfigTableConfigService } from '@home/components/group/group-config-table-config.service';
import { Customer } from '@shared/models/customer.model';
import { CustomerService } from '@core/http/customer.service';
import { Router } from '@angular/router';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import * as i0 from "@angular/core";
export declare class CustomerGroupConfigFactory implements EntityGroupStateConfigFactory<Customer> {
    private groupConfigTableConfigService;
    private userPermissionsService;
    private translate;
    private utils;
    private dialog;
    private homeDialogs;
    private customerService;
    private router;
    private store;
    private window;
    constructor(groupConfigTableConfigService: GroupConfigTableConfigService<Customer>, userPermissionsService: UserPermissionsService, translate: TranslateService, utils: UtilsService, dialog: MatDialog, homeDialogs: HomeDialogsService, customerService: CustomerService, router: Router, store: Store<AppState>, window: Window);
    createConfig(params: EntityGroupParams, entityGroup: EntityGroupStateInfo<Customer>): Observable<GroupEntityTableConfig<Customer>>;
    private openCustomer;
    manageUsers($event: Event, customer: Customer | ShortEntityView, config: GroupEntityTableConfig<Customer>, params: EntityGroupParams): void;
    manageCustomers($event: Event, customer: Customer | ShortEntityView, config: GroupEntityTableConfig<Customer>, params: EntityGroupParams): void;
    manageAssets($event: Event, customer: Customer | ShortEntityView, config: GroupEntityTableConfig<Customer>, params: EntityGroupParams): void;
    manageDevices($event: Event, customer: Customer | ShortEntityView, config: GroupEntityTableConfig<Customer>, params: EntityGroupParams): void;
    manageEntityViews($event: Event, customer: Customer | ShortEntityView, config: GroupEntityTableConfig<Customer>, params: EntityGroupParams): void;
    manageEdges($event: Event, customer: Customer | ShortEntityView, config: GroupEntityTableConfig<Customer>, params: EntityGroupParams): void;
    manageDashboards($event: Event, customer: Customer | ShortEntityView, config: GroupEntityTableConfig<Customer>, params: EntityGroupParams): void;
    onCustomerAction(action: EntityAction<Customer>, config: GroupEntityTableConfig<Customer>, params: EntityGroupParams): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<CustomerGroupConfigFactory, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<CustomerGroupConfigFactory>;
}
