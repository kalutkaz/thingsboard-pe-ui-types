import { OnDestroy } from '@angular/core';
import { MatDialogRef } from '@angular/material/dialog';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import { FormGroupDirective, NgForm, UntypedFormBuilder, UntypedFormControl, UntypedFormGroup } from '@angular/forms';
import { DialogComponent } from '@shared/components/dialog.component';
import { Router } from '@angular/router';
import { Device, DeviceProfileInfo, DeviceTransportType } from '@shared/models/device.models';
import { MatStepper } from '@angular/material/stepper';
import { EntityType } from '@shared/models/entity-type.models';
import { DeviceProfileService } from '@core/http/device-profile.service';
import { EntityId } from '@shared/models/id/entity-id';
import { DeviceService } from '@core/http/device.service';
import { ErrorStateMatcher } from '@angular/material/core';
import { StepperSelectionEvent } from '@angular/cdk/stepper';
import { BreakpointObserver } from '@angular/cdk/layout';
import { UserPermissionsService } from '@core/http/user-permissions.service';
import { Operation, Resource } from '@shared/models/security.models';
import { ServiceType } from '@shared/models/queue.models';
import { EntityGroup } from '@shared/models/entity-group.models';
import { EntityInfoData } from '@shared/models/entity.models';
import * as i0 from "@angular/core";
export interface DeviceWizardDialogData {
    customerId?: string;
    entityGroup?: EntityGroup;
}
export declare class DeviceWizardDialogComponent extends DialogComponent<DeviceWizardDialogComponent, Device> implements OnDestroy, ErrorStateMatcher {
    protected store: Store<AppState>;
    protected router: Router;
    data: DeviceWizardDialogData;
    private errorStateMatcher;
    dialogRef: MatDialogRef<DeviceWizardDialogComponent, Device>;
    private deviceProfileService;
    private deviceService;
    private userPermissionsService;
    private breakpointObserver;
    private fb;
    addDeviceWizardStepper: MatStepper;
    resource: typeof Resource;
    operation: typeof Operation;
    selectedIndex: number;
    showNext: boolean;
    createProfile: boolean;
    entityType: typeof EntityType;
    deviceTransportTypes: DeviceTransportType[];
    deviceTransportTypeTranslations: Map<DeviceTransportType, string>;
    deviceTransportTypeHints: Map<DeviceTransportType, string>;
    deviceWizardFormGroup: UntypedFormGroup;
    transportConfigFormGroup: UntypedFormGroup;
    alarmRulesFormGroup: UntypedFormGroup;
    provisionConfigFormGroup: UntypedFormGroup;
    credentialsFormGroup: UntypedFormGroup;
    ownerAndGroupsFormGroup: UntypedFormGroup;
    labelPosition: MatStepper['labelPosition'];
    entityGroup: EntityGroup;
    customerId: string;
    initialOwnerId: EntityId;
    initialGroups: EntityInfoData[];
    serviceType: ServiceType;
    private subscriptions;
    private currentDeviceProfileTransportType;
    constructor(store: Store<AppState>, router: Router, data: DeviceWizardDialogData, errorStateMatcher: ErrorStateMatcher, dialogRef: MatDialogRef<DeviceWizardDialogComponent, Device>, deviceProfileService: DeviceProfileService, deviceService: DeviceService, userPermissionsService: UserPermissionsService, breakpointObserver: BreakpointObserver, fb: UntypedFormBuilder);
    ngOnDestroy(): void;
    isErrorState(control: UntypedFormControl | null, form: FormGroupDirective | NgForm | null): boolean;
    cancel(): void;
    previousStep(): void;
    nextStep(): void;
    getFormLabel(index: number): string;
    get maxStepperIndex(): number;
    private deviceProfileTransportTypeChanged;
    add(): void;
    get deviceTransportType(): DeviceTransportType;
    deviceProfileChanged(deviceProfile: DeviceProfileInfo): void;
    private createDeviceProfile;
    private createDevice;
    private saveCredentials;
    allValid(): boolean;
    changeStep($event: StepperSelectionEvent): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DeviceWizardDialogComponent, [null, null, null, { skipSelf: true; }, null, null, null, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DeviceWizardDialogComponent, "tb-device-wizard", never, {}, {}, never, never, false, never>;
}
