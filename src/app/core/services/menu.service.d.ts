import { AuthService } from '../auth/auth.service';
import { Store } from '@ngrx/store';
import { AppState } from '../core.state';
import { HomeSection, MenuSection } from '@core/services/menu.models';
import { Observable } from 'rxjs';
import { CustomMenuService } from '@core/http/custom-menu.service';
import { EntityGroupService } from '@core/http/entity-group.service';
import { BroadcastService } from '@core/services/broadcast.service';
import { Router } from '@angular/router';
import { UserPermissionsService } from '@core/http/user-permissions.service';
import * as i0 from "@angular/core";
export declare class MenuService {
    private store;
    private router;
    private customMenuService;
    private entityGroupService;
    private broadcast;
    private userPermissionsService;
    private authService;
    private menuSections$;
    private homeSections$;
    private entityGroupSections;
    private currentMenuSections;
    private currentHomeSections;
    private currentCustomSection;
    private currentCustomChildSection;
    constructor(store: Store<AppState>, router: Router, customMenuService: CustomMenuService, entityGroupService: EntityGroupService, broadcast: BroadcastService, userPermissionsService: UserPermissionsService, authService: AuthService);
    private buildMenu;
    private createEntityGroupSection;
    private buildSysAdminMenu;
    private buildSysAdminHome;
    private buildTenantAdminMenu;
    private buildTenantAdminHome;
    private buildCustomerUserMenu;
    private buildCustomerUserHome;
    private buildCustomMenu;
    private getCustomMenuStateId;
    menuSections(): Observable<Array<MenuSection>>;
    homeSections(): Observable<Array<HomeSection>>;
    sectionActive(section: MenuSection): boolean;
    getCurrentCustomSection(): MenuSection;
    getCurrentCustomChildSection(): MenuSection;
    private updateCurrentCustomSection;
    private detectCurrentCustomSection;
    private detectCurrentCustomChildSection;
    private extractQueryParams;
    getRedirectPath(parentPath: string, redirectPath: string): Observable<string>;
    static ɵfac: i0.ɵɵFactoryDeclaration<MenuService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<MenuService>;
}
